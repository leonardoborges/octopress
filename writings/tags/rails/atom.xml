<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Leonardo Borges]]></title>
  <link href="http://www.leonardoborges.com/writings/tags/rails/atom.xml" rel="self"/>
  <link href="http://www.leonardoborges.com/writings/"/>
  <updated>2018-02-19T20:38:30+11:00</updated>
  <id>http://www.leonardoborges.com/writings/</id>
  <author>
    <name><![CDATA[Leonardo Borges]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Look ma, no hands: Tweeting with your voice]]></title>
    <link href="http://www.leonardoborges.com/writings/2011/04/09/look-ma-no-hands-tweeting-with-your-voice/"/>
    <updated>2011-04-09T00:00:00+10:00</updated>
    <id>http://www.leonardoborges.com/writings/2011/04/09/look-ma-no-hands-tweeting-with-your-voice</id>
    <content type="html"><![CDATA[<p>
This is just another one of those boring weekends where I felt the need to hack on something.<br><br>If you follow Google Chrome's <a title="Chrome's blog" href="http://chrome.blogspot.com/" target="_blank">blog</a> you're probably aware of this little nifty feature they started to implement in their latest builds: <a href="http://chrome.blogspot.com/2011/03/talking-to-your-computer-with-html5.html" target="_blank">HTML5 voice recognition</a>.<br><br>And that's when it struck me: "Hey, what if I use that and tweet with my voice instead of typing?"<br><br>The result of this hacking session is <a href="http://loudparrot.heroku.com/">LoudParrot</a>, a sample Rails app that shows how to do just that. You <strong>will</strong> need a fairly recent build of Google Chrome -beta - which you can download <a href="http://www.google.com/intl/en/landing/chrome/beta/" target="_blank">here</a>.<br><br>You can get the source on <a href="https://github.com/leonardoborges/loud-parrot">GitHub</a>.
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IDE Review: RubyMine]]></title>
    <link href="http://www.leonardoborges.com/writings/2011/02/16/ide-review-rubymine/"/>
    <updated>2011-02-16T00:00:00+11:00</updated>
    <id>http://www.leonardoborges.com/writings/2011/02/16/ide-review-rubymine</id>
    <content type="html"><![CDATA[<p>
Since I started working with Ruby about 4 years ago, I've used quite a few text editors and ide's: <a href="http://www.aptana.com/products/radrails">RadRails</a>, <a href="http://projects.gnome.org/gedit/" target="_blank">gedit</a> + <a href="https://github.com/lexrupy/gmate" target="_blank">plugins</a>, <a href="http://macromates.com/" target="_blank">TextMate</a> and <a href="http://www.vim.org/" target="_blank">Vim</a>.<br><br>TextMate is the one I've used the most and it's been ok for a long time. Until you realize you need half a dozen bundles to make it really useful for ruby development. Obviously the same goes for Vim and gedit.<br><br>Oh, and forget about refactoring. In these tools refactoring equals regex global replace. So if you need it, well, forget it.<br><br>That's when I decided to give <strong><a href="http://www.jetbrains.com/ruby/" target="_blank">RubyMine</a></strong> a fair go. I've been using it heavily for a while now and I must say I love it!<br><br>What pissed me off about RadRails when I first tried it was the speed. It was too slow, something people take for granted when running java based IDE's.<br><br>However this is not true for RubyMine. You DO take a hit on startup, nothing major, but once it's done, it's a breeze.<br><br>I've compiled a list of my favorite productivity shortcuts and features. Hope it'll be useful to someone else.<br><br><strong>Productivity Shortcuts</strong><br><br><hr /><strong>Navigation</strong><br><br><em>Ctrl + Tab</em> - File Switcher<br><br><em>Cmd + Shift + T</em> - Switching between implementation and test works perfectly. Even in a pure ruby project<br><br><em>Cmd + Shift + F12</em> - Expand/restore editor<br><br><em>Alt + Shift + N</em> - Go to model/view/controller<br><br><em>Alt + F1</em> - Show current file in other views such as the project tree (scroll to file)<br><br><em>Cmd + Shift + N</em> - Open file<br><br><em>Cmd + Alt + Shift + N</em> - Open symbol - across files<br><br><em>Alt + F7</em> - Find usages - when on a method, variable, etc…<br><br><strong>Running/Debugging</strong><br><br><em>Ctrl + Shift + F10</em> - Run current [test] file. When inside a test method, run that single method.<br><br><em>Ctrl + Shift + F9</em> - Same as above, but in debug mode.<br><br><em>Shift + F10/Shift + F9</em> - Run/Debug last action executed<br><br><em>Alt + R</em> - Run rake task<br><br><strong>Refactoring</strong><br><br><em>Cmd + Alt + N</em> - Inline variable/ method<br><br><em>Cmd + Alt + M</em> - Extract method<br><br><em>Shift + F6</em> - Rename<br><br><em>F5</em> - Copy current file as...<br><br><strong>Editing</strong><br><br><em> Cmd + Y</em> - Delete line<br><br><em>Cmd + D</em> - Duplicate Line/Selection<br><br><em>Alt + Mouse</em> - Column selection<br><br><em>Cmd + Shift + (Up Arrow|Down Arrow)</em> - Moves de line or selected block of code up or down<br><br><strong>Features</strong><br><br><hr /><em>Code completion</em> - It's fairly accurate and pretty fast. They've done some good yak shaving around this area.<br><br><em>Debugger</em> - The debugging interface is an absolute beauty. Saved me a lot of time where I'd have used puts statements or googled to re-learn how to use ruby-debug instead. Definitely worth checking out.<br><br><strong>The bad stuff</strong><br><br><hr /><em>It is not free</em> - unless you are a committer to an open-source project. But it's not expensive either.<br><br><em>It is a bit slower</em> - but not that much. The performance hit is insignificant compared to the added value.<br><br><em>Regex file open, TextMate style</em> - What can I say? I do miss this.<br><br><em>Wrap highlighted text</em> - In TextMate, if you highlight a word and press ", [, {, ( or # it surrounds the word with the respective combination of quotes, brackets, etc... Another missed feature<br><br><strong>Wrapping up</strong><br>It's probably soon to say it but so far RubyMine has been my missing Ruby IDE. And I'm very happy with it. :)
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clouds against the floods: presentation available]]></title>
    <link href="http://www.leonardoborges.com/writings/2011/02/12/clouds-against-the-floods-presentation-available/"/>
    <updated>2011-02-12T00:00:00+11:00</updated>
    <id>http://www.leonardoborges.com/writings/2011/02/12/clouds-against-the-floods-presentation-available</id>
    <content type="html"><![CDATA[<p>
Last Tuesday I gave a short presentation on the whole <a title="Clouds against the Floods" href="http://www.leonardoborges.com/writings/2011/01/16/clouds-against-the-floods/" target="_blank">Clouds Against the Floods</a> thing at the <a title="Ruby on Rails Oceania Meetup" href="http://rubyonrails.com.au/sydney-meetups" target="_blank">Ruby on Rails Oceania User Group</a> here in Sydney.<br><br>Those guys are awesome and they recorded the talk - thanks guys!<br><br>If you'd like to download the slides, they're available on <a title="Slideshare profile" href="http://www.slideshare.net/borgesleonardo/clouds-against-the-floods" target="_blank">Slideshare</a>.<br><br>Enjoy! ;)<br><br><object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="425" height="344" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="allowFullScreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="src" value="http://www.youtube.com/v/DYDD9XiW3Gg?hl=en&amp;fs=1" /><param name="allowfullscreen" value="true" /><embed type="application/x-shockwave-flash" width="425" height="344" src="http://www.youtube.com/v/DYDD9XiW3Gg?hl=en&amp;fs=1" allowscriptaccess="always" allowfullscreen="true"></embed></object>
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update to AppConstants: It can now be used as a gem]]></title>
    <link href="http://www.leonardoborges.com/writings/2011/02/02/update-to-appconstants-it-can-now-be-used-as-a-gem/"/>
    <updated>2011-02-02T00:00:00+11:00</updated>
    <id>http://www.leonardoborges.com/writings/2011/02/02/update-to-appconstants-it-can-now-be-used-as-a-gem</id>
    <content type="html"><![CDATA[<p>
This is just a quick post to let you know that <a title="app_constants github repo" href="https://github.com/leonardoborges/app_constants" target="_blank">AppConstants</a> can now be used as gem!<br><br>Just add it to your Gemfile and 'bundle install' it:<br><br>

```
#in your Gemfile
gem "app_constants"

#in the console
$ bundle install
$ rails generate app_constants
#then follow the instructions on-screen instructions
```

<br><br>It can also be used without Rails. Check out full instructions on the <a title="app_constants github repo" href="https://github.com/leonardoborges/app_constants" target="_blank">GitHub repository</a>.<br><br>Feedback welcome :)
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clouds against the Floods]]></title>
    <link href="http://www.leonardoborges.com/writings/2011/01/16/clouds-against-the-floods/"/>
    <updated>2011-01-16T00:00:00+11:00</updated>
    <id>http://www.leonardoborges.com/writings/2011/01/16/clouds-against-the-floods</id>
    <content type="html"><![CDATA[<p>
I think by now everyone's heard of the hard time the guys up in Queensland, Australia are having because of the <a title="Queensland Floods" href="http://www.google.com/search?q=qld+floods" target="_blank">recent floods</a>. People have lost their lives and many others have lost their homes and businesses, product of years of hard work.<br><br>As a result of this massive disaster the Queensland Government decided to run a telethon to encourage donations to help the flood victims. The Telethon aired last Sunday, 09/01/11, on Channel 9 and lasted for 2 hours.<br><br>The problem was the existing donations system that the Government had been using so far: it was just not thought out to handle the load we were expecting to have on Sunday.<br><br>That's when my employer, <a title="ThoughtWorks" href="http://www.thoughtworks.com/" target="_blank">ThoughtWorks</a>, kindly offered a hand to <a href="http://www.qld.gov.au/smartservice/" target="_blank">Smart Services Queensland</a> in the attempt to make sure they could receive all donations that were likely to come through the web.<br><br>After that, on the Thursday afternoon before the event, <a title="Phillip Calçado" href="http://fragmental.tw/" target="_blank">Phillip Calçado</a>, Ben Barnard and I set off on a mission against the clock: we had a little over 48 hours to develop, test and deploy an application that was expected to handle thousands of users. Not only that but an application that, should it fail, would prevent millions of dollars from reaching the people in need in Queensland. This was a great responsibility but we knew we could do it.<br><br>Given the time constraints it was a bit obvious that we would use <a title="Ruby on Rails" href="http://rubyonrails.org/" target="_blank">Ruby on Rails</a> for this app. Both because of the productivity it's known for and because we had the knowledge right there. With that out of the way, we had to decide how and where we would deploy this thing. We thought a little about it and came down to to 2 options: <a title="Amazon EC2" href="http://aws.amazon.com/ec2/">Amazon EC2</a> or <a title="Heroku" href="http://heroku.com/" target="_blank">Heroku</a> (which is powered by Amazon EC2 under the hood). I pushed hard for Heroku and that's what we ended up going with.<br><br>Now it was time to get down and dirty and start coding the app. In principle it should be fairly simple. It needed a form where a potential donor would fill out his/her information, giving the option to receive the tax receipt by email or regular mail - more on that later. Upon clicking submit users would be taken to the secure payment gateway website where they could input their credit card number and finish the payment, after which they would be taken back to our app with a success - or an error - message and a transaction number.<br><br>Now this work flow has a couple of implications: First, all emails would have to be sent in the background so as to not interfere with the website performance. We were expecting to be sending thousands of them - workers anyone?<br><br>Second, the payment gateway integration would have to be developed and tested from scratch. Up until now the Queensland Government integrated with it in a different manner that could not be reused in this case.<br><br>And most important of all, although simple in concept, we had no idea of the load we should be preparing for. There was just no data from previous telethons. Thus we decided to prepare for the maximum we possibly could.<br><br>As we developed the application we deployed continuously to Heroku in order to test the payment gateway integration, benchmark the app using <a title="Apache AB" href="http://httpd.apache.org/docs/2.0/programs/ab.html" target="_blank">Apache AB</a>, setup cache headers - Heroku uses <a title="Varnish" href="http://www.varnish-cache.org/" target="_blank">Varnish</a> - and find bottlenecks.<br><br>Email was one of these bottlenecks and that's why we decided to handle that in the background using <a title="Delayed::Job" href="https://github.com/collectiveidea/delayed_job" target="_blank">Delayed::Jobs</a>.<br><br>Since the first deployment, we also tweaked a couple of things at Heroku, such as migrating from their free PostgreSQL offering to a dedicated instance that we believed would both take the load and have plenty of room for all the data - as I write this post, we are already well over the 5MB limit they offer for free.<br><br>Long story short, by Saturday evening  the website was up and running on 5 app instances, a 6th instance running background jobs - sending emails - and a dedicated PostgreSQL database server.<br><br>As Heroku is outside the Government network, their SMTP server was a no go on the short term so we also integrated the app with <a title="SendGrid" href="http://sendgrid.com/" target="_blank">SendGrid</a>, an email delivery service that fitted perfectly our needs - although the site got so much traction that we went over our monthly quota with them. But the nice guys from SendGrid increased our limit after I opened a ticket explaining the situation!<br><br>As for performance we used <a href="http://newrelic.com/">NewRelic</a> to monitor the application, which Heroku also makes a breeze to integrate with.<br><br>We all went home to rest and get ready for Sunday, the day of the Telethon, when we would be monitoring the app throughout the day. We were all excited and when the show went live, we started seeing all those beautiful access charts moving like crazy, spiking over 720 requests per minute and being solid like a rock with flat and fast response times throughout the night.<br><br>In about two hours we had over AUD$2,000,000.00 (two million) donated through our website.<br><br>Since then the number of transactions dropped but has stayed constant and as of today we've received AUD$25,438,518.32 (over 25 millions of dollars) that will be donated to the flood victims in Queensland.<br><br>Oh, and the site is still up and going strong so move your fingers and go help: <a title="Queensland Floods Telethon" href="http://telethon.smartservice.qld.gov.au/" target="_blank">telethon.smartservice.qld.gov.au</a> - there will be heaps of people grateful for your donation.
</p>



]]></content>
  </entry>
  
</feed>
