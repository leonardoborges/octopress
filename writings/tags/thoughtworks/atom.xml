<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ThoughtWorks | Leonardo Borges]]></title>
  <link href="http://www.leonardoborges.com/writings/tags/thoughtworks/atom.xml" rel="self"/>
  <link href="http://www.leonardoborges.com/writings/"/>
  <updated>2018-02-19T20:38:30+11:00</updated>
  <id>http://www.leonardoborges.com/writings/</id>
  <author>
    <name><![CDATA[Leonardo Borges]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Report: Clojure Meetup #1]]></title>
    <link href="http://www.leonardoborges.com/writings/2011/10/12/report-clojure-meetup-1/"/>
    <updated>2011-10-12T00:00:00+11:00</updated>
    <id>http://www.leonardoborges.com/writings/2011/10/12/report-clojure-meetup-1</id>
    <content type="html"><![CDATA[<p>Last Tuesday we held ThoughtWorks' Australia first Clojure meetup here in Sydney. It was a lot of fun so I thought I'd share a few words about it.</p>




<p>The format was rather simple. First, we had a brief introduction to the language syntax by breaking down a couple of snippets and understanding how each bit worked. For instance, this is one of those snippets:</p>


<p>``` clojure
;;word count
(reduce #(if (%1 %2)</p>

<pre><code>          (assoc %1 %2 (inc (%1 %2)))
          (assoc %1 %2 1))
</code></pre>

<p>{}
(clojure.string/split "Clojure 101 - this is is gonna be be great great great" #"\s"))
```</p>

<p>The cool thing here is that a simple example like this can show quite a few things about Clojure's syntax:</p>




<ul>
  <li><a href="http://en.wikipedia.org/wiki/Polish_notation">Polish notation</a> - this is really the first thing you need to get used to</li>
  <li><a href="http://clojuredocs.org/clojure_core/clojure.core/fn">Anonymous functions</a></li>
  <li><a href="http://clojuredocs.org/clojure_core/clojure.core/hash-map">The hash map literal and how to use it as a function</a></li>
  <li><a href="http://clojuredocs.org/clojure_core/clojure.core/re-pattern">Regular expressions</a></li>
</ul>




<p>After this brief discussion about Clojure's API, we split up in pairs to solve a simple <a
    href="http://projecteuler.net/problem=1">problem</a> from <a href="http://projecteuler.net/">Project Euler</a>:</p>




<p><i>Add all the natural numbers below one thousand that are multiples of 3 or 5.</i></p>




<p>It's the easiest on the site so it allowed us to focus entirely on the language. My first thought was to implement it in an imperative way,
but that wouldn't really teach me anything new so Kurman - the colleague I was pairing with - and I came up with this solution, which I really like:</p>


<p>``` clojure
(reduce #(if (or (= (rem %2 3) 0) (= (rem %2 5) 0)) (+ %1 %2)</p>

<pre><code>       %1)
  0
  (take 1000 (iterate inc 0)))
</code></pre>

<p>```</p>

<p>A simple, concise solution that demanded a functional approach. It allowed us to explore Clojure's APIs and concepts such as lazyness through the use of an
  <a href="http://en.wikibooks.org/wiki/Clojure_Programming/Examples/Cookbook#Infinite_Sequences">infinite sequence</a>. Fun :)</p>




<p>I created a <a href="https://github.com/leonardoborges/twoz-clojure-meetup">github repository</a> to host this and upcoming solutions from our group. Feel free to browse around.</p>




<p>Can't wait for our next meetup, when we'll hack on <a href="http://overtone.github.com/">Overtone</a>!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One year of ThoughtWorks: a retrospective]]></title>
    <link href="http://www.leonardoborges.com/writings/2011/04/25/one-year-of-thoughtworks-a-retrospective/"/>
    <updated>2011-04-25T00:00:00+10:00</updated>
    <id>http://www.leonardoborges.com/writings/2011/04/25/one-year-of-thoughtworks-a-retrospective</id>
    <content type="html"><![CDATA[<p>
It seems like it was yesterday that I wrote about my next big challenge: <a href="http://www.leonardoborges.com/writings/2009/10/08/soon-off-to-conquer-lands-afar/" target="_blank">Moving to Australia to join ThoughtWorks</a>. Since then a year has passed and I thought I'd share a little bit about what it's been like so far.<br><br>The first thing you notice when joining ThoughtWorks is that you're surrounded by smart, opinionated people. It was once common for me to be the one fighting for automated testing, TDD, Ruby and overall finding new and better ways of doing what we do - but imagine how different it is to join a team that takes that for granted. This gives you a very high standard within the team that frees your mind to try and achieve bigger things. It's a great feeling.<br><br><a href="http://www.thoughtworks.com" target="_blank">ThoughtWorks</a>' culture is inspiring. We're a small and very active community - there's always something going on in our offices after hours: Tech nights, local groups' meetups, training, people randomly hacking on stuff and even band rehearsals! The point is that you can get involved in several ways and the best part is that <a href="http://www.thoughtworks.com" target="_blank">ThoughtWorks</a> supports all that: be it providing pizzas and beers, flying us to international conferences, buying books and whatnot in order to help us do our best! I could go on but you get the point.<br><br>In return, we get to work on hard stuff. Not only technically challenging but personally challenging as well. As consultants we can be thought of as agents of change: When we go to a client, we're not only concerned with building the coolest projects with the best tools out there - of course that's a big part of what we do - but we're expected to change the way they think, work and do business.<br><br>Since I joined I worked with 2 clients - and 2 different projects - that varied wildly between them. That is in part what makes working at ThoughtWorks so interesting to me. You get to change domains, technologies and teams more often than not, which nurtures a stimulating environment.<br><br>The first project for instance was a standard Java web app where we had the usual players such as <a title="Spring" href="http://www.springsource.org/" target="_blank">Spring</a>, <a title="Hibernate" href="http://www.hibernate.org/" target="_blank">Hibernate</a>, <a title="Freemarker" href="http://freemarker.sourceforge.net/" target="_blank">Freemarker</a>, etc...<br><br>My current project, on the other hand, is very much like a start-up: We have a <a title="Amazon EC2" href="http://aws.amazon.com/ec2/" target="_blank">EC2</a> box that plays our <a title="Continuous Integration" href="http://en.wikipedia.org/wiki/Continuous_integration" target="_blank">CI</a> role, all code is hosted on <a title="Github" href="https://github.com/" target="_blank">Github</a>, we're using <a title="Ruby on Rails" href="http://www.rubyonrails.org/" target="_blank">Ruby on Rails</a> and deploying the whole thing to <a href="http://www.heroku.com/">Heroku</a> + <a title="Amazon RDS" href="http://aws.amazon.com/rds/" target="_blank">RDS</a>.<br><br>To top it off I also had the chance to make a real difference in the Queensland Flood Relief Appeal in 2010, when we built a <a title="Clouds against the floods" href="http://www.leonardoborges.com/writings/2011/01/16/clouds-against-the-floods/" target="_blank">donation app to help the flood victims</a> - that was definitely the highlight of the year, and something I'm particularly proud of.<br><br>What next? I'm eager to find out what my second year here has to offer. Bring it on!
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clouds against the Floods]]></title>
    <link href="http://www.leonardoborges.com/writings/2011/01/16/clouds-against-the-floods/"/>
    <updated>2011-01-16T00:00:00+11:00</updated>
    <id>http://www.leonardoborges.com/writings/2011/01/16/clouds-against-the-floods</id>
    <content type="html"><![CDATA[<p>
I think by now everyone's heard of the hard time the guys up in Queensland, Australia are having because of the <a title="Queensland Floods" href="http://www.google.com/search?q=qld+floods" target="_blank">recent floods</a>. People have lost their lives and many others have lost their homes and businesses, product of years of hard work.<br><br>As a result of this massive disaster the Queensland Government decided to run a telethon to encourage donations to help the flood victims. The Telethon aired last Sunday, 09/01/11, on Channel 9 and lasted for 2 hours.<br><br>The problem was the existing donations system that the Government had been using so far: it was just not thought out to handle the load we were expecting to have on Sunday.<br><br>That's when my employer, <a title="ThoughtWorks" href="http://www.thoughtworks.com/" target="_blank">ThoughtWorks</a>, kindly offered a hand to <a href="http://www.qld.gov.au/smartservice/" target="_blank">Smart Services Queensland</a> in the attempt to make sure they could receive all donations that were likely to come through the web.<br><br>After that, on the Thursday afternoon before the event, <a title="Phillip Calçado" href="http://fragmental.tw/" target="_blank">Phillip Calçado</a>, Ben Barnard and I set off on a mission against the clock: we had a little over 48 hours to develop, test and deploy an application that was expected to handle thousands of users. Not only that but an application that, should it fail, would prevent millions of dollars from reaching the people in need in Queensland. This was a great responsibility but we knew we could do it.<br><br>Given the time constraints it was a bit obvious that we would use <a title="Ruby on Rails" href="http://rubyonrails.org/" target="_blank">Ruby on Rails</a> for this app. Both because of the productivity it's known for and because we had the knowledge right there. With that out of the way, we had to decide how and where we would deploy this thing. We thought a little about it and came down to to 2 options: <a title="Amazon EC2" href="http://aws.amazon.com/ec2/">Amazon EC2</a> or <a title="Heroku" href="http://heroku.com/" target="_blank">Heroku</a> (which is powered by Amazon EC2 under the hood). I pushed hard for Heroku and that's what we ended up going with.<br><br>Now it was time to get down and dirty and start coding the app. In principle it should be fairly simple. It needed a form where a potential donor would fill out his/her information, giving the option to receive the tax receipt by email or regular mail - more on that later. Upon clicking submit users would be taken to the secure payment gateway website where they could input their credit card number and finish the payment, after which they would be taken back to our app with a success - or an error - message and a transaction number.<br><br>Now this work flow has a couple of implications: First, all emails would have to be sent in the background so as to not interfere with the website performance. We were expecting to be sending thousands of them - workers anyone?<br><br>Second, the payment gateway integration would have to be developed and tested from scratch. Up until now the Queensland Government integrated with it in a different manner that could not be reused in this case.<br><br>And most important of all, although simple in concept, we had no idea of the load we should be preparing for. There was just no data from previous telethons. Thus we decided to prepare for the maximum we possibly could.<br><br>As we developed the application we deployed continuously to Heroku in order to test the payment gateway integration, benchmark the app using <a title="Apache AB" href="http://httpd.apache.org/docs/2.0/programs/ab.html" target="_blank">Apache AB</a>, setup cache headers - Heroku uses <a title="Varnish" href="http://www.varnish-cache.org/" target="_blank">Varnish</a> - and find bottlenecks.<br><br>Email was one of these bottlenecks and that's why we decided to handle that in the background using <a title="Delayed::Job" href="https://github.com/collectiveidea/delayed_job" target="_blank">Delayed::Jobs</a>.<br><br>Since the first deployment, we also tweaked a couple of things at Heroku, such as migrating from their free PostgreSQL offering to a dedicated instance that we believed would both take the load and have plenty of room for all the data - as I write this post, we are already well over the 5MB limit they offer for free.<br><br>Long story short, by Saturday evening  the website was up and running on 5 app instances, a 6th instance running background jobs - sending emails - and a dedicated PostgreSQL database server.<br><br>As Heroku is outside the Government network, their SMTP server was a no go on the short term so we also integrated the app with <a title="SendGrid" href="http://sendgrid.com/" target="_blank">SendGrid</a>, an email delivery service that fitted perfectly our needs - although the site got so much traction that we went over our monthly quota with them. But the nice guys from SendGrid increased our limit after I opened a ticket explaining the situation!<br><br>As for performance we used <a href="http://newrelic.com/">NewRelic</a> to monitor the application, which Heroku also makes a breeze to integrate with.<br><br>We all went home to rest and get ready for Sunday, the day of the Telethon, when we would be monitoring the app throughout the day. We were all excited and when the show went live, we started seeing all those beautiful access charts moving like crazy, spiking over 720 requests per minute and being solid like a rock with flat and fast response times throughout the night.<br><br>In about two hours we had over AUD$2,000,000.00 (two million) donated through our website.<br><br>Since then the number of transactions dropped but has stayed constant and as of today we've received AUD$25,438,518.32 (over 25 millions of dollars) that will be donated to the flood victims in Queensland.<br><br>Oh, and the site is still up and going strong so move your fingers and go help: <a title="Queensland Floods Telethon" href="http://telethon.smartservice.qld.gov.au/" target="_blank">telethon.smartservice.qld.gov.au</a> - there will be heaps of people grateful for your donation.
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Soon, off to conquer lands afar]]></title>
    <link href="http://www.leonardoborges.com/writings/2009/10/08/soon-off-to-conquer-lands-afar/"/>
    <updated>2009-10-08T00:00:00+11:00</updated>
    <id>http://www.leonardoborges.com/writings/2009/10/08/soon-off-to-conquer-lands-afar</id>
    <content type="html"><![CDATA[<p>
Once more my life is taking a huge turn.<br><br>I've been pretty quiet for the past month and honestly don't know how I managed to hold in my excitement. I've just accepted an offer from <a href="http://www.thoughtworks.com.au/" target="_blank">ThoughtWorks</a> to be based at their australian offices, either in Sydney or Melbourne, depending  on where my 1st project will be.<br><br>For those of you who don't know, ThoughtWorks is a global IT consultancy that is really well known in the software development community. It's been advocating agile methodologies and test-driven development for several years now and seems to work really hard to attract and keep <a title="Martin Fowler" href="http://www.martinfowler.com" target="_blank">many</a> <a title="Rebecca Parsons" href="http://www.thoughtworks.com/who-we-are/leadership-profiles/rebecca-parsons.html" target="_blank">bright</a> <a title="Neal Ford" href="http://www.nealford.com/" target="_blank">people</a> <a title="Ola Bini" href="http://olabini.com/" target="_blank">working</a> <a title="All ThoughtWorkers" href="http://www.thoughtworks.com/who-we-are/our-people/profiles.html" target="_blank">there</a>.<br><br>As a result, ThoughtWorks inspires companies and professionals around the world by delivering high quality projects and massively supporting/contributing to <a title="Projects created/contributed to by ThoughtWorks" href="http://opensource.thoughtworks.com" target="_blank">open source projects</a>.<br><br>Needless to say, I am really excited to be joining a company with such an amazing culture and so many smart people.<br><br>The hiring process was long, tough and tiring - but yet enjoyable. It took 5 interviews, 1 code review and 1 pairing session, a process through which I talked to 8 thoughtworkers. They take pride on their hiring process and now I understand why.<br><br>Now I'm just going through the bureaucratic side of things: gathering documents, certificates, translations - all in order to apply for my VISA, which can take up to 3 months to get ready. In the meantime, you can still find me here in Madrid, where I'll be celebrating with a few 'cañas'. Feel free to join me! ;)
</p>



]]></content>
  </entry>
  
</feed>
